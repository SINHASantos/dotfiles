"
"   /\\\        /\\\
"   \/\\\       \/\\\
"    \//\\\      /\\\   /\\\
"      \//\\\    /\\\   \///     /\\\\\  /\\\\\    /\\/\\\\\\\     /\\\\\\\\
"        \//\\\  /\\\     /\\\  /\\\///\\\\\///\\\ \/\\\/////\\\  /\\\//////
"          \//\\\/\\\     \/\\\ \/\\\ \//\\\  \/\\\ \/\\\   \///  /\\\
"            \//\\\\\      \/\\\ \/\\\  \/\\\  \/\\\ \/\\\        \//\\\
"              \//\\\       \/\\\ \/\\\  \/\\\  \/\\\ \/\\\         \///\\\\\\\\
"                \///        \///  \///   \///   \///  \///            \////////
"
" Welcome to my vimrc. If you have not already I'd recommend that you run
" `~/dotfiles/script/bootstrap` to get everything setup correctly.
"

" ========================================
" == Mandatory setup =====================
" ========================================

scriptencoding utf-8
set encoding=utf-8

set nocompatible
filetype off

" ========================================
" == Plugins =============================
" ========================================

call plug#begin('~/.vim/plugged')

Plug 'Raimondi/delimitMate'
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe'
Plug 'altercation/vim-colors-solarized'
Plug 'bitc/vim-hdevtools', { 'for': 'haskell' }
Plug 'bling/vim-airline'
Plug 'christoomey/Vim-g-dot'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim2hs', { 'for': 'haskell' }
Plug 'davidpdrsn/vim-notable'
Plug 'davidpdrsn/vim-spectacular'
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'kana/vim-textobj-user', { 'for': 'ruby' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
Plug 'othree/html5-syntax.vim', { 'for': 'html' }
Plug 'pbrisbin/vim-mkdir'
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'mkd'] }
Plug 'rking/ag.vim', { 'on': 'Ag' }
Plug 'scrooloose/syntastic', { 'for': 'haskell' }
Plug 'sjl/gundo.vim', { 'on': 'GundoToggle' }
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch', { 'on': 'Dispatch' }
Plug 'tpope/vim-endwise', { 'for': ['vim', 'ruby'] }
Plug 'tpope/vim-eunuch', { 'on': 'Remove' }
Plug 'tpope/vim-fugitive', { 'on': 'Gblame' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }

call plug#end()

" Enable built-in matchit plugin
runtime macros/matchit.vim

" ========================================
" == General config ======================
" ========================================

" misc
filetype plugin indent on         " Enable good stuff
syntax enable                     " Enable syntax highlighting
set background=dark               " Tell Vim the color of my background
colorscheme solarized
set fillchars+=vert:\             " Don't show pipes in vertical splits
set grepprg=ag\ --nogroup\ --nocolor\ -i
set backspace=indent,eol,start    " Backspace over everything in insert mode
set hidden                        " Don't unload buffers when leaving them
set nospell                       " Disable spell checking
set spelllang=en_us               " Use english US for spell checking
set scrolljump=5                  " Scroll more than one line
set scrolloff=3                   " Min. lines to keep above or below the cursor when scrolling
set shell=/bin/zsh                " Use zsh as shell
set splitbelow                    " Open splits below
set splitright                    " Open splits to the right
set tags=./tags,tags;$HOME        " Tell Vim where to look for tags files
set timeout                       " Lower the delay of escaping out of other modes
set visualbell                    " Disable annoying beep
set wildmenu                      " Enable command-line like completion
set wildmode=list:longest         " List all matches and complete till longest common string
set wrap                          " Wrap long lines
set noesckeys                     " Remove delay after pressing esc
set ttimeout                      " Set behavior of when partial mappings are pressed
set ttimeoutlen=1                 " Don't delay execution of a mapping
set nojoinspaces                  " Insert only one space when joining lines that contain sentence-terminating punctuation like `.`.
set ttyfast                       " Prevent screen going black so often

" ui
set t_Co=256                      " More colors please
set laststatus=2                  " Always show the status line
set linebreak                     " Don't break lines in the middle of words
set list                          " Show some more characters
set listchars=tab:▸\              " Char representing a tab
set listchars+=extends:❯          " Char representing an extending line
set listchars+=nbsp:␣             " Non breaking space
set listchars+=precedes:❮         " Char representing an extending line in the other direction
set listchars+=trail:·            " Show trailing spaces as dots
set nocursorcolumn                " Don't highlight the current column
set nocursorline                  " Don't highlight the current line
set number                        " Don't show line numbers
set numberwidth=4                 " The width of the number column
set relativenumber                " Show relative numbers
set guifont=Input\ Mono:h11 " Set gui font
set showmode                      " Don't show which mode we are in, this is handled by airline
set guioptions-=T                 " No toolbar in MacVim
set guioptions-=r                 " Also no scrollbar
set guioptions-=L                 " Really no scrollbar

" searching
set hlsearch                      " Highlight search matches
set ignorecase                    " Do case insensitive search unless there are capital letters
set incsearch                     " Perform incremental searching

" backups & undo
set backup
set backupdir=~/.vim/tmp/backup/
set backupskip=/tmp/*,/private/tmp/*
set noswapfile
set history=1000                  " Sets how many lines of history vim has to remember
set undodir=~/.vim/tmp/undo/
set undofile
set undolevels=1000               " How many steps of undo history vim should remember
set writebackup

" indentation
set expandtab                     " Indent with spaces
set shiftwidth=2                  " Number of spaces to use when indenting
set smartindent                   " Auto indent new lines
set softtabstop=2                 " Number of spaces a <tab> counts for when inserting
set tabstop=2                     " Number of spaces a <tab> counts for

" folds
set foldenable                    " Enable folds
set foldlevelstart=99             " Open all folds by default
set foldmethod=indent             " Fold by indentation

" ========================================
" == Auto commands =======================
" ========================================

augroup highlightingLongLines
  autocmd!
  autocmd FileType *        match ErrorMsg '\%>80v.\+'
  autocmd FileType calendar match none
  autocmd FileType conf     match none
  autocmd FileType css      match none
  autocmd FileType eruby    match none
  autocmd FileType hamlet   match none
  autocmd FileType help     match none
  autocmd FileType html     match none
  autocmd FileType markdown match none
  autocmd FileType mkd      match none
  autocmd FileType objc     match none
  autocmd FileType objcpp   match none
  autocmd FileType php      match none
  autocmd FileType plaintex match none
  autocmd FileType qf       match none
  autocmd FileType sh       match none
  autocmd FileType sql      match none
  autocmd FileType tex      match none
  autocmd FileType text     match none
  autocmd FileType unite    match none
  autocmd FileType vimfiler match none
  autocmd FileType xhtml    match none
  autocmd FileType xml      match none
augroup END

augroup configureFoldsAndSpelling
  autocmd!
  autocmd FileType mkd       setlocal spell nofoldenable
  autocmd FileType markdown  setlocal spell nofoldenable
  autocmd FileType text      setlocal spell nofoldenable
  autocmd FileType gitcommit setlocal spell
  autocmd FileType vim       setlocal foldmethod=marker
augroup END

augroup resumeCursorPosition
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

augroup miscGroup
  autocmd!
  "
  " use omni completion in haskell files
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

  " set comments for SML
  autocmd FileType sml set commentstring=(*\ %s\ *)

  " somehow this is required to move the gray color of the sign column
  autocmd FileType * highlight clear SignColumn

  " when in a git commit buffer go the beginning
  autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

  " save files when focus is lost
  autocmd BufLeave * silent! update

  " configure indentation for python
  autocmd FileType python set expandtab tabstop=4 softtabstop=4 shiftwidth=4

  " Disable spell checking in vim help files
  autocmd FileType help set nospell

  " Fasto setup
  autocmd BufNewFile,BufRead *.fo setlocal ft=fasto

  " C setup, Vim thinks .h is C++
  autocmd BufNewFile,BufRead *.h setlocal ft=c

  " Pow setup
  autocmd BufNewFile,BufRead *.pow setlocal ft=pow
  autocmd FileType pow set commentstring={{\ %s\ }}
augroup END

" ========================================
" == Mappings ============================
" ========================================

" Rather than having loads of comments above my mappings I
" try to make well named functions
source ~/.vim/functions.vim

" Disable useless and annoying keys
noremap Q <Nop>

" Don't wanna retrain my fingers
command! W w
command! Q q
command! Qall qall

" Make Y work as expected
nnoremap Y y$

" Intuitive movement over long lines
nnoremap k gk
nnoremap j gj

nnoremap gjb :call JsBindFunction()<cr>

" Resize windows with the arrow keys
nnoremap <up>    <C-W>+
nnoremap <down>  <C-W>-
nnoremap <left>  3<C-W>>
nnoremap <right> 3<C-W><

" Move text around in visual mode
vnoremap <left>  <nop>
vnoremap <right> <nop>
vnoremap <up> xkP`[V`]
vnoremap <down> xp`[V`]

" Exit insert mode and save just by hitting ESC
imap <c-s> <esc>:w<cr>
map <c-s> <esc>:w<cr>

" insert current file name with \f in insert mode
inoremap \f <C-R>=expand("%:t:r")<CR>

" insert path to current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" correct spelling from insert mode
inoremap <c-l> <esc>:call CorrectSpelling()<cr>a

" add Ex command for finding ruby Conditionals
command! FindConditionals :normal /\<if\>\|\<unless\>\|\<and\>\|\<or\>\|||\|&&<cr>

" add Ex command for removing characters sometimes present when copying from
" tex compiled PDF files
command! RemoveFancyCharacters :call RemoveFancyCharacters()

" Merge tabs
nmap <C-W>M :call MergeTabs()<CR>

" Save file with sudo by doing :w!!
cmap w!! w !sudo tee % >/dev/null

" ========================================
" == Leader mappings =====================
" ========================================

let mapleader = "\<Space>"

vnoremap <leader>, :normal .<cr>
nnoremap <leader>$ :normal ds(i$ <cr>
nnoremap <leader>. :normal ds(i. <cr>

noremap <leader><leader> <C-^>

noremap <leader>; maA;<esc>`a
noremap <leader>== magg=G`a
vnoremap <leader>= :Tabularize /
noremap <leader>/ /\v
noremap <leader>? ?\v

"-- a --"
noremap <leader>a :call YankWholeBuffer(0)<cr>
noremap <leader>A :call YankWholeBuffer(1)<cr>
noremap <leader>as :call rails_test#hsplit_spec()<cr>
noremap <leader>av :call rails_test#vsplit_spec()<cr>

"-- b --"
nnoremap <leader>bp orequire 'pry'; binding.pry<esc>^
nnoremap <leader>bg :call ToggleBackground()<cr>

"-- c --"
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>
noremap <leader>cm :!chmod +x %<cr>

"-- d --"
noremap <leader>do :call ToggleRubyBlockSyntax()<cr>
noremap <leader>di :Dispatch<space>
nmap <silent> <leader>D <Plug>DashSearch

" CtrlP modes I use most often
noremap <leader>db :CtrlPBuffer<cr>
noremap <leader>dl :CtrlPLine<cr>
noremap <leader>dq :CtrlPQuickfix<cr>
noremap <leader>dc :CtrlPChange<cr>
noremap <leader>dt :CtrlPTag<cr>
noremap <leader>dT :!retag<cr>:CtrlPClearAllCaches<cr>:CtrlPTag<cr>

" Rails specific
noremap <leader>ddm :CtrlP app/models<cr>
noremap <leader>ddc :CtrlP app/controllers<cr>
noremap <leader>ddv :CtrlP app/views<cr>
noremap <leader>ddz :CtrlP app/serializers<cr>
noremap <leader>dds :CtrlP app/services<cr>
noremap <leader>dsm :CtrlP spec/models<cr>
noremap <leader>dsc :CtrlP spec/controllers<cr>
noremap <leader>dsv :CtrlP spec/views<cr>
noremap <leader>dsz :CtrlP spec/serializers<cr>
noremap <leader>dss :CtrlP spec/services<cr>


"-- e --"
noremap <leader>ev :tabedit $MYVIMRC<cr>
noremap <leader>es :UltiSnipsEdit<cr>

"-- f --"
nnoremap <leader>F :CtrlPClearAllCaches<cr>:CtrlP<cr>
nnoremap <leader>f :CtrlP<cr>

"-- g --"
noremap <leader>g :Git<space>
noremap <leader>gap :Git add -p<cr>
noremap <leader>gb :Gblame<cr>
noremap <leader>gc :Gcommit<cr>
noremap <leader>gd :Gdiff<cr>
noremap <leader>gp :Dispatch git push<cr>
noremap <leader>gr :Gremove<cr>
noremap <leader>gs :Gstatus<cr>
noremap <leader>ga :Gwrite<cr>
noremap <leader>gu :GundoToggle<cr>

"-- h --"
noremap <leader>h :nohlsearch<cr>
nnoremap <leader>ht :HdevtoolsType<CR>
nnoremap <leader>hc :HdevtoolsClear<CR>
nnoremap <leader>hi :HdevtoolsInfo<CR>

"-- i --"
nnoremap <leader>i :call IndentEntireFile()<cr>

"-- j --"
noremap <leader>j :call GotoDefinitionInSplit(0)<cr>
noremap <leader>J :call GotoDefinitionInSplit(1)<cr>

"-- k --"
noremap <leader>k :w<cr>:call spectacular#run_tests_with_current_line()<cr>

"-- l --"
noremap <leader>l :call MakeList()<cr>

"-- m --"
noremap <leader>mh :call MakeMarkdownHeading(1)<cr>
noremap <leader>mH :call MakeMarkdownHeading(2)<cr>
vnoremap <leader>mlc :call FormatSmlComments()<cr>
vnoremap <leader>ml :call PasteMarkdownLink()<cr>

"-- n --"
noremap <leader>ns :set spell!<cr>

"-- o --"
noremap <leader>o :only<cr>
noremap <leader>O :!open %<cr><cr>

"-- p --"
noremap <leader>p :call PasteFromSystemClipBoard()<cr>
noremap <leader>pi :PlugInstall<cr>
noremap <leader>pc :PlugClean<cr>
noremap <leader>pu :PlugUpdate<cr>

"-- q --"
noremap <leader>q :call CloseExtraPane()<cr>

"-- r --"
noremap <leader>rbi :w\|:Dispatch bundle install<cr>
noremap <leader>rd :redraw!<cr>
noremap <leader>re :call FixFormatting()<cr>
noremap <leader>ri :RunInInteractiveShell<space>
noremap <leader>rn :call RenameFile()<cr>
noremap <leader>rr :w\|:call RunCurrentFile()<cr>

nnoremap <leader>rel :call PromoteToLet()<cr>

"-- s --"
noremap <leader>sb :call notable#open_notes_file()<cr>
noremap <leader>se :SyntasticToggleMode<cr>:w<cr>
noremap <leader>ss :w\|:SyntasticCheck<cr>
noremap <leader>sv :source $MYVIMRC<cr>:e<cr>

"-- t --"
map <leader>t :w<cr>:call spectacular#run_tests()<cr>
map <leader>T :w<cr>:Dispatch rspec<cr>

"-- u --"

"-- v --"
noremap <leader>v :vsplit<cr>

"-- w --"
noremap <leader>W :wq<cr>
noremap <leader>wip :!git-wip<cr>

"-- x --"
noremap <leader>x :set filetype=

"-- y --"

"-- z --"
noremap <leader>z :call CorrectSpelling()<cr>

" ========================================
" == Misc plugin config ==================
" ========================================

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v(\.(git|hg|svn)|deps|_build|_sass|tmp|node_modules|vendor|_site|vim\.symlink\/bundle)$',
  \ 'file': '\v\.(exe|so|dll|o|hi|ui|uo|sig|scssc|png|jpg|jpeg|gif|eot|woff|ttf|pdf|aux|log|class|gz|psd)$',
  \ 'link': '',
  \ }

let g:ctrlp_match_window = 'max:20'

let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsSnippetDirectories = ["ultisnips"]

let g:multi_cursor_exit_from_visual_mode = 0

let g:spectacular_integrate_with_tmux = 0
let g:spectacular_integrate_with_dispatch = 0
let g:spectacular_debugging_mode = 1
let g:spectacular_clear_screen = 1

let g:syntastic_ruby_checkers = ["rubocop"]

let g:syntastic_mode_map = { "mode": "passive",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": [] }

let g:syntastic_haskell_checkers = ["hdevtools"]
let g:syntastic_haskell_hdevtools_args = "-g -Wall -g -fno-warn-unused-do-bind"
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["haskell", "c", "cpp"],
    \ "passive_filetypes": [] }

let g:notable_notes_folder = "~/notes/"

let g:airline_powerline_fonts = 1

let g:haskell_conceal = 0

let g:necoghc_enable_detailed_browse = 1

let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

let g:airline#extensions#tabline#enabled = 1

let g:netrw_liststyle=3

" ========================================
" == Test running ========================
" ========================================

call spectacular#add_test_runner('cucumber', './vendor/bin/behat {spec}', '', function("InPhpProject"))
call spectacular#add_test_runner('cucumber', 'bin/cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"), function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"))
call spectacular#add_test_runner('cucumber', 'bin/cucumber {spec}', '', function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec}', '')
call spectacular#add_test_runner('ruby', 'bin/cucumber', '_steps', function("InRailsApp"))
call spectacular#add_test_runner('ruby', 'cucumber', '_steps')
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output bin/rspec --tag focus:true {spec}', '_spec.rb', function("TestsInRails"), function("HasRspecFocusTag"))
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output bin/rspec --format doc {spec}', '_spec.rb', function("TestsInRails"))
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output bin/rspec --format doc {spec}:{line-number}', '_spec.rb', function("TestsInRails"))
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output bundle exec rspec --tag focus:true {spec}', '_spec,rb', function("IncludesRspecGem"), function("HasRspecFocusTag"))
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output bundle exec rspec {spec}', '_spec,rb', function("IncludesRspecGem"))
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output rspec --format doc {spec}', '_spec.rb')
call spectacular#add_test_runner('ruby, javascript, eruby, coffee, haml', 'record-output rspec --format doc {spec}:{line-number}', '_spec.rb')
call spectacular#add_test_runner('python', 'nosetests --rednose', 'test_')
call spectacular#add_test_runner('php', 'vendor/bin/phpunit --colors {spec}', '_tests')
call spectacular#add_test_runner('sml', 'smlspec {spec}', '')
call spectacular#add_test_runner('javascript', 'mocha {spec}', '_spec')
call spectacular#add_test_runner('javascript', 'mocha {spec}', 'Spec')
call spectacular#add_test_runner('coffee', 'mocha --compilers coffee:coffee-script/register {spec}', '_spec')
call spectacular#add_test_runner('coffee', 'mocha --compilers coffee:coffee-script/register {spec}', 'Spec')
call spectacular#add_test_runner('java', 'javac *.java && junit {spec} | /Users/davidpdrsn/source/hacks/color_junit/color-junit', 'Test.java')
call spectacular#add_test_runner('java', 'javac *.java && junit {spec} | /Users/davidpdrsn/source/hacks/color_junit/color-junit', 'Tests.java')
call spectacular#add_test_runner('elixir', 'mix test {spec}', '_test.exs')
call spectacular#add_test_runner('elixir', 'mix test {spec}:{line-number}', '_test.exs')
call spectacular#add_test_runner('clojure', 'lein test {spec}', '_test')
call spectacular#add_test_runner('haskell', 'ghci {spec}', '')

" ========================================
" == Local config ========================
" ========================================

try
  source ~/.vimrc.local
catch
endtry
