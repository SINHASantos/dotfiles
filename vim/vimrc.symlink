"
"   /\\\        /\\\                                                               
"   \/\\\       \/\\\                                                              
"    \//\\\      /\\\   /\\\                                                       
"      \//\\\    /\\\   \///     /\\\\\  /\\\\\    /\\/\\\\\\\     /\\\\\\\\      
"        \//\\\  /\\\     /\\\  /\\\///\\\\\///\\\ \/\\\/////\\\  /\\\//////      
"          \//\\\/\\\     \/\\\ \/\\\ \//\\\  \/\\\ \/\\\   \///  /\\\            
"            \//\\\\\      \/\\\ \/\\\  \/\\\  \/\\\ \/\\\        \//\\\          
"              \//\\\       \/\\\ \/\\\  \/\\\  \/\\\ \/\\\         \///\\\\\\\\  
"                \///        \///  \///   \///   \///  \///            \////////  
"
" Welcome to my vimrc. If you have not already I'd recommend that you run
" `~/dotfiles/script/bootstrap` to get everything setup correctly.
"

" ========================================
" == Mandatory setup =====================
" ========================================

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ========================================
" == Bundles =============================
" ========================================

" core
Bundle 'gmarik/vundle'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'git://git.wincent.com/command-t.git'

" misc
Bundle 'Raimondi/delimitMate'
Bundle 'SirVer/ultisnips'
Bundle 'davidpdrsn/vim-spectacular'
Bundle 'ervandew/supertab'
Bundle 'godlygeek/tabular'
Bundle 'jgdavey/tslime.vim'
Bundle 'kana/vim-textobj-user'
Bundle 'rking/ag.vim'
Bundle 'sjl/gundo.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'mattn/emmet-vim'
Bundle 'tpope/vim-vinegar'
Bundle 'tpope/vim-unimpaired'

" syntax
Bundle 'travitch/hasksyn'
Bundle 'kchmck/vim-coffee-script'
Bundle 'othree/html5-syntax.vim'

" languages: ruby
Bundle 'vim-ruby/vim-ruby'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rbenv'

" experimental
Bundle 'gcmt/wildfire.vim'
Bundle 'vim-scripts/ZoomWin'

" Enable built-in matchit plugin
runtime macros/matchit.vim

filetype plugin indent on
syntax enable

" ========================================
" == General config ======================
" ========================================

source ~/.vim/functions.vim

" misc
set fillchars+=vert:\             " Don't show pipes in vertical splits
set grepprg=ag\ --nogroup\ --nocolor
set backspace=indent,eol,start    " Backspace over everything in insert mode
set hidden                        " Don't unload buffers when leaving them
set nospell                       " Disable spell checking
set spelllang=en_us               " Use english US for spell checking
set scrolljump=5                  " Scroll more than one line
set scrolloff=3                   " Min. lines to keep above or below the cursor when scrolling
set shell=/bin/zsh                " Use zsh as shell
set splitbelow                    " Open splits below
set splitright                    " Open splits to the right
set t_Co=256                      " More colors please
set tags=./tags,tags;$HOME        " Tell Vim where to look for tags files
set timeout                       " Lower the delay of escaping out of other modes
set visualbell                    " Disable annoying beep
set wildmenu                      " Enable command-line like completion
set wildmode=list:longest         " List all matches and complete till longest common string
set wrap                          " Wrap long lines
set noesckeys
set ttimeout
set ttimeoutlen=1
set nojoinspaces                  " Insert only one space when joining lines that contain sentence-terminating punctuation like `.`.

" ui
colorscheme default
set background=light              " Tell Vim the color of my background
set laststatus=2                  " Always show the status line
set linebreak                     " Don't break lines in the middle of words
set list                          " Show unprintable characters
set listchars=tab:▸\              " Char representing a tab
set listchars+=extends:❯          " Char representing an extending line
set listchars+=nbsp:␣             " Non breaking space
set listchars+=precedes:❮         " Char representing an extending line in the other direction
set listchars+=trail:·            " Show trailing spaces as dots
set nocursorcolumn                " Don't highlight the current column
set nocursorline                  " Don't highlight the current line
set number                        " Don't show line numbers
set numberwidth=4                 " The width of the number column
set relativenumber                " Show relative numbers
set showbreak=↪                   " Show wraped lines with this char

" searching
set hlsearch                      " Highlight search matches
set ignorecase                    " Do case insensitive search unless there are capital letters
set incsearch                     " Perform incremental searching

" backups & undo
set backup
set backupdir=~/.vim/tmp/backup/
set backupskip=/tmp/*,/private/tmp/*
set noswapfile
set history=1000                  " Sets how many lines of history vim has to remember
set undodir=~/.vim/tmp/undo/
set undofile
set undolevels=1000               " How many steps of undo history vim should remember
set writebackup

" indentation
set expandtab                     " Indent with spaces
set shiftwidth=2                  " Number of spaces to use when indenting
set smartindent                   " Auto indent new lines
set softtabstop=2                 " Number of spaces a <tab> counts for when inserting
set tabstop=2                     " Number of spaces a <tab> counts for

" folds
set foldenable                    " Enable folds
set foldlevelstart=99             " Fold by indentation
set foldmethod=indent             " Fold by indentation

" ========================================
" == Auto commands =======================
" ========================================

augroup highlightingLongLines
  autocmd!
  autocmd FileType *        match ErrorMsg '\%>100v.\+'
  autocmd FileType sml      match ErrorMsg '\%>80v.\+'
  autocmd FileType markdown match none
  autocmd FileType text     match none
  autocmd FileType html     match none
  autocmd FileType xhtml    match none
  autocmd FileType eruby    match none
  autocmd FileType unite    match none
  autocmd FileType vimfiler match none
  autocmd FileType plaintex match none
  autocmd FileType conf     match none
  autocmd FileType tex      match none
  autocmd FileType qf       match none
  autocmd FileType php      match none
  autocmd FileType java     match none
  autocmd FileType help     match none
  autocmd FileType vim      match none
  autocmd FileType calendar match none
augroup END

augroup configureFolds
  autocmd!
  autocmd FileType mkd      setlocal spell nofoldenable
  autocmd FileType markdown setlocal spell nofoldenable
  autocmd FileType text     setlocal spell nofoldenable
  autocmd FileType vim      setlocal foldmethod=marker
augroup END

augroup resumeCursorPosition
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

augroup miscGroup
  autocmd!
  " set comments for SML
  autocmd FileType sml set commentstring=(*\ %s\ *)
  " jump the top in git commit messages
  autocmd FileType gitcommit normal gg
  " somehow this is required to move the gray color of the sign column
  autocmd FileType * highlight clear SignColumn
  " when in a git commit buffer go the beginning
  autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
  " save files when focus is lost
  autocmd BufLeave * silent! update
  " set color or cursor highlight
  autocmd FileType * hi CursorLine cterm=NONE ctermbg=234
  autocmd FileType python set expandtab tabstop=4 softtabstop=4 shiftwidth=4
augroup END

" ========================================
" == Mappings ============================
" ========================================

" Disable useless and annoying keys
noremap Q <Nop>
noremap K <Nop>

" Don't wanna retrain my fingers
command! W w
command! Q q
command! Qall qall

" Make Y work as expected
nnoremap Y y$

" Intuitive movement over long lines
nnoremap k gk
nnoremap j gj

" Resize windows with the arrow keys
nnoremap <up>    <C-W>+
nnoremap <down>  <C-W>-
nnoremap <left>  3<C-W>>
nnoremap <right> 3<C-W><

" Move text around in visual mode
vnoremap <left>  <nop>
vnoremap <right> <nop>
vnoremap <up> xkP`[V`]
vnoremap <down> xp`[V`]

" Spell correct current word
imap <c-z> <esc><leader>zea

" insert current file name with \f in insert mode
inoremap \f <C-R>=expand("%:t:r")<CR>

" insert that to current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" sort the selected lines
vnoremap gs :sort<cr>

command! FindConditionals :normal /\<if\>\|\<unless\>\|\<and\>\|\<or\>\|||\|&&<cr>

command! RemoveFancyCharacters :call RemoveFancyCharacters()

" ========================================
" == Leader mappings =====================
" ========================================

let mapleader = ','
let maplocalleader = '\\'

vnoremap <leader>. :normal .<cr>

noremap <leader><leader> <C-^>

noremap <leader><space> :nohlsearch<cr>

noremap <leader>; maA;<esc>`a
noremap <leader>== magg=G`a
vnoremap <leader>= :Tabularize /
noremap <leader>/ /\v
noremap <leader>? ?\v

"-- a --"
noremap <leader>a :call YankWholeBuffer(0)<cr>
noremap <leader>A :call YankWholeBuffer(1)<cr>

"-- b --"
noremap <leader>bi :BundleInstall<cr>
noremap <leader>bc :BundleClean<cr>
noremap <leader>bu :BundleUpdate<cr>

"-- c --"
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

"-- d --"
noremap <leader>do :call ToggleRubyBlockSyntax()<cr>
noremap <leader>di :Dispatch<space>

"-- e --"
noremap <leader>ev :tabedit $MYVIMRC<cr>
noremap <leader>es :UltiSnipsEdit<cr>

"-- f --"
noremap <leader>f :Ag -i ""<left>

"-- g --"
noremap <leader>g :Git<space>
noremap <leader>gb :Gblame<cr>
noremap <leader>gc :Gcommit<cr>
noremap <leader>gd :Gdiff<cr>
noremap <leader>gp :Git push<cr><cr>
noremap <leader>gr :Gremove<cr>
noremap <leader>gs :Gstatus<cr>
noremap <leader>ga :Gwrite<cr>
noremap <leader>gg :w<cr>:Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr><cr>:e<cr>
noremap <leader>gu :GundoToggle<cr>

"-- h --"

"-- i --"

"-- j --"

"-- k --"

"-- l --"

"-- m --"
noremap <leader>mh :call MakeMarkdownHeading(1)<cr>
noremap <leader>mH :call MakeMarkdownHeading(2)<cr>
vnoremap <leader>mlc :call FormatSmlComments()<cr>

"-- n --"

"-- o --"
noremap <leader>o :only<cr>
noremap <leader>O :!open %<cr><cr>

"-- p --"
noremap <leader>p :call PasteFromSystemClipBoard()<cr>

"-- q --"
noremap <leader>q :cclose<cr>

"-- r --"
noremap <leader>rn :call RenameFile()<cr>
noremap <leader>re :call FixFormatting()<cr>
vnoremap <leader>r :!ruby<cr>
noremap <leader>rd :redraw!<cr>
noremap <leader>rr :w\|:call RunCurrentFile()<cr>

nnoremap <leader>rel :call PromoteToLet()<cr>

"-- s --"
noremap <leader>ss :vsp<cr>:A<cr>
noremap <leader>sv :source $MYVIMRC<cr>

"-- t --"
map <leader>t :w<cr>:call spectacular#run_tests()<cr>
map <leader>T :w<cr>:!echo "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"; bin/rspec<cr>

"-- u --"

"-- v --"
noremap <leader>v :vsplit<cr>

"-- w --"
noremap <leader>w :w<cr>
noremap <leader>W :wq<cr>

"-- x --"
noremap <leader>x :set filetype=

"-- y --"
noremap <leader>y "+y

"-- z --"
noremap <leader>z :call CorrectSpelling()<cr>

" ========================================
" == Command-T config ====================
" ========================================

nnoremap [find_prefix] <Nop>
nmap <space> [find_prefix]

map [find_prefix]f :CommandTFlush<cr>:CommandT<cr>
map [find_prefix]s :CommandTFlush<cr>:CommandT spec<cr>
map [find_prefix]c :CommandTFlush<cr>:CommandT app/controllers<cr>
map [find_prefix]v :CommandTFlush<cr>:CommandT app/views<cr>
map [find_prefix]m :CommandTFlush<cr>:CommandT app/models<cr>
map [find_prefix]a :CommandTFlush<cr>:CommandT app/assets<cr>
map [find_prefix]l :CommandTFlush<cr>:CommandT app/lib<cr>

map [find_prefix]t :!retag<cr>:CommandTFlush<cr>:CommandTTag<cr>
map [find_prefix]b :CommandTBuffer<cr>

let g:CommandTWildIgnore=&wildignore
      \.",**/bower_components/*"
      \.",**/tmp/*"
      \.",**/*.png"
      \.",**/*.jpg"
      \.",**/*.jpeg"
      \.",**/*.gif"
      \.",**/*.eot"
      \.",**/*.woff"
      \.",**/*.ttf"
      \.",**/node_modules/*"
      \.",**/_site/*"
      \.",**/dist/*"
      \.",**/vim.symlink/bundle/*"
      \.",*.alfredpreferences"
      \.",*.pyc"

let g:CommandTCancelMap='<C-[>'

" ========================================
" == Misc plugin config ==================
" ========================================

let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsSnippetDirectories = ["ultisnips"]

let g:multi_cursor_exit_from_visual_mode = 0

let g:ruby_refactoring_map_keys = 0

let NERDTreeIgnore = ['\.class$']

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

let g:spectacular_integrate_with_tmux = 0
let g:spectacular_integrate_with_dispatch = 0
let g:spectacular_debugging_mode = 1

" ========================================
" == Test running ========================
" ========================================

call spectacular#add_test_runner('cucumber', 'bin/cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"), function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"))
call spectacular#add_test_runner('cucumber', 'bin/cucumber {spec}', '', function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec}', '')
call spectacular#add_test_runner('ruby', 'bin/cucumber', '_steps', function("InRailsApp"))
call spectacular#add_test_runner('ruby', 'cucumber', '_steps')

call spectacular#add_test_runner('ruby', 'bin/rspec {spec}', '_spec', function("TestsInRails"))
call spectacular#add_test_runner('ruby', 'bundle exec rspec {spec}', '_spec', function("IncludesRspecGem"))
call spectacular#add_test_runner('ruby', 'rspec {spec}', '_spec')

call spectacular#add_test_runner('python', 'nosetests --rednose', 'test_')

call spectacular#add_test_runner('sml', 'smlspec {spec}', '')

call spectacular#add_test_runner('javascript', 'karma run', '_spec')
call spectacular#add_test_runner('javascript', 'karma run', 'Spec')
call spectacular#add_test_runner('coffee', 'karma run', '_spec')
call spectacular#add_test_runner('coffee', 'karma run', 'Spec')

call spectacular#add_test_runner('java', 'javac *.java && junit {spec}', 'Test')

" ========================================
" == Local config ========================
" ========================================

try
  source ~/.vimrc.local
catch
endtry
