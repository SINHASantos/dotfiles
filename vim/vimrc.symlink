" ========================================
" == Mandatory setup =====================
" ========================================

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ========================================
" == Bundles =============================
" ========================================

Bundle 'gmarik/vundle'

Bundle 'Raimondi/delimitMate'
Bundle 'SirVer/ultisnips'
Bundle 'airblade/vim-gitgutter'
Bundle 'altercation/vim-colors-solarized'
Bundle 'bling/vim-airline'
Bundle 'christoomey/vim-colors-ctoomey'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'davidpdrsn/vim-spectacular'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'ervandew/supertab'
Bundle 'godlygeek/tabular'
Bundle 'https://github.com/wincent/Command-T.git'
Bundle 'jgdavey/tslime.vim'
Bundle 'kana/vim-textobj-user'
Bundle 'kchmck/vim-coffee-script'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'rking/ag.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'travitch/hasksyn'
Bundle 'vim-ruby/vim-ruby'
Bundle 'wikitopian/hardmode'

" Enable built-in matchit plugin
runtime macros/matchit.vim

filetype plugin indent on
syntax enable

" ========================================
" == General config ======================
" ========================================

source ~/.vim/functions.vim

set background=dark               " Tell Vim the color of my background
set backspace=indent,eol,start    " Backspace over everything in insert mode
set expandtab                     " Indent with spaces
set fillchars+=vert:\             " Don't show pipes in vertical splits
set foldenable                    " Enable folds
set foldlevelstart=99             " Fold by indentation
set foldmethod=indent             " Fold by indentation
set grepprg=ag                    " Use Silver Searcher instead of grep
set hidden                        " Don't unload buffers when leaving them
set history=1000                  " Sets how many lines of history vim has to remember
set hlsearch                      " Highlight search matches
set ignorecase                    " Do case insensitive search unless there are capital letters
set incsearch                     " Perform incremental searching
set laststatus=2                  " Always show the status line
set linebreak                     " Don't break lines in the middle of words
set list                          " Show unprintable characters
set listchars=tab:▸\              " Char representing a tab
set listchars+=extends:❯          " Char representing an extending line
set listchars+=nbsp:␣             " Non breaking space
set listchars+=precedes:❮         " Char representing an extending line in the other direction
set listchars+=trail:·            " Show trailing spaces as dots
set nobackup                      " Don't make backups
set nocursorcolumn                " Don't highlight the current column
set nocursorline                  " Don't highlight the current line
set noshowmode                    " Don't show the mode we are currently in ler Airline handle that
set nospell                       " Disable spell checking
set noswapfile                    " Don't make swap files
set number                        " Don't show line numbers
set numberwidth=4                 " The width of the number column
set relativenumber                " Don't show relative line numbers
set ruler                         " Show current cursor position
set scrolljump=5                  " Scroll more than one line
set scrolloff=3                   " Min. lines to keep above or below the cursor when scrolling
set shell=/bin/zsh                " Use zsh as shell
set shiftwidth=2                  " Number of spaces to use when indenting
set showbreak=↪                   " Show wraped lines with this char
set smartindent                   " Auto indent new lines
set softtabstop=2                 " Number of spaces a <tab> counts for when inserting
set spelllang=en_us               " Use english US for spell checking
set splitbelow                    " Open splits below
set splitright                    " Open splits to the right
set t_Co=256                      " More colors please
set tabstop=2                     " Number of spaces a <tab> counts for
set tags=./tags,tags;$HOME        " Tell Vim where to look for tags files
set timeout                       " Lower the delay of escaping out of other modes
set undolevels=1000               " How many steps of undo history vim should remember
set visualbell                    " Disable annoying beep
set wildmenu                      " Enable command-line like completion
set wildmode=list:longest         " List all matches and complete till longest common string
set wrap                          " Wrap long lines

colorscheme default

" ========================================
" == Auto commands =======================
" ========================================

augroup highlightingLongLines
  autocmd!
  autocmd FileType *        match ErrorMsg '\%>100v.\+'
  autocmd FileType sml      match ErrorMsg '\%>80v.\+'
  autocmd FileType markdown match none
  autocmd FileType text     match none
  autocmd FileType html     match none
  autocmd FileType xhtml    match none
  autocmd FileType eruby    match none
  autocmd FileType unite    match none
  autocmd FileType vimfiler match none
  autocmd FileType plaintex match none
  autocmd FileType conf     match none
  autocmd FileType tex      match none
  autocmd FileType qf       match none
  autocmd FileType php      match none
  autocmd FileType java     match none
  autocmd FileType help     match none
  autocmd FileType vim      match none
  autocmd FileType calendar match none
augroup END

augroup configureFolds
  autocmd!
  autocmd FileType mkd setlocal spell nofoldenable
  autocmd FileType markdown setlocal spell nofoldenable
  autocmd FileType text setlocal spell nofoldenable
  autocmd FileType text setlocal spell nofoldenable
  autocmd FileType vim setlocal foldmethod=marker
augroup END

augroup resumeCursorPosition
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

augroup miscGroup
  autocmd!
  " set comments for SML
  autocmd FileType sml set commentstring=(*\ %s\ *)
  " insert current file name with \f in insert mode in java files
  autocmd FileType java inoremap <buffer> \f <C-R>=expand("%:t:r")<CR>
  " jump the top in git commit messages
  autocmd FileType gitcommit normal gg
  " save buffers when leaving them
  " autocmd BufLeave * silent! write
  " somehow this is required to move the gray color of the sign column
  autocmd FileType * highlight clear SignColumn
augroup END

" ========================================
" == Mappings ============================
" ========================================

" Disable useless and annoying keys
noremap Q <Nop>
noremap K <Nop>

" Don't wanna retrain my fingers
command! W w
command! Q q
command! Qall qall

" Make Y work as expected
nnoremap Y y$

" Intuitive movement over long lines
nnoremap k gk
nnoremap j gj

noremap <C-s> :nohlsearch<cr>

" Resize windows with the arrow keys
nnoremap <up>    <C-W>+
nnoremap <down>  <C-W>-
nnoremap <left>  3<C-W>>
nnoremap <right> 3<C-W><

inoremap <left>  <nop>
inoremap <right> <nop>
inoremap <up> <esc>ddkPi
inoremap <down> <esc>ddpi

vnoremap <left>  <nop>
vnoremap <right> <nop>
vnoremap <up> xkP`[V`]
vnoremap <down> xp`[V`]

" Spell correct current word
imap <c-z> <esc>,zea

noremap <c-[> <c-c>

" ========================================
" == Leader mappings =====================
" ========================================

let mapleader = ','
let maplocalleader = '\\'

noremap <leader><leader> <C-^>

noremap <leader>; maA;<esc>`a
noremap <leader>== magg=G`a
vnoremap <leader>= :Tabularize /
noremap <leader>/ /\v
noremap <leader>? ?\v

"-- a --"
" yank the whole buffer
noremap <leader>a maggyG`a
" yank the whole buffer into the system clipboard
noremap <leader>A maggVG"*y`a

"-- b --"
noremap <leader>b :call ToggleBackgroundColor()<cr>
noremap <leader>bi :BundleInstall<cr>
noremap <leader>bc :BundleClean<cr>
noremap <leader>bu :BundleUpdate<cr>

"-- c --"
" cd to the directory of the current file
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

"-- d --"
noremap <leader>do :call ToggleRubyBlockSyntax()<cr>
noremap <leader>di :Dispatch<space>

"-- e --"
noremap <leader>ev :tabedit $MYVIMRC<cr>
noremap <leader>es :UltiSnipsEdit<cr>

"-- f --"
noremap <leader>f :Ag -i ""<left>

"-- g --"
noremap <leader>g :Git<space>
noremap <leader>gb :Gblame<cr>
noremap <leader>gc :Gcommit<cr>
noremap <leader>gd :Gdiff<cr>
noremap <leader>gp :Git push<cr><cr>
noremap <leader>gr :Gremove<cr>
noremap <leader>gs :Gstatus<cr>
noremap <leader>ga :Gwrite<cr>
noremap <leader>gg :w<cr>:Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr><cr>:e<cr>
noremap <leader>gu :GundoToggle<cr>

"-- h --"

"-- i --"

"-- j --"

"-- k --"

"-- l --"
noremap <leader>l :tabe ~/Documents/tool_sharpening_list.markdown<cr>

"-- m --"
" For quickly making markdown headings
noremap <leader>mh :call MakeMarkdownHeading(1)<cr>
noremap <leader>mH :call MakeMarkdownHeading(2)<cr>
" Format SML comments
vnoremap <leader>mlc ^:s/(\*/ */g<cr>gv:s/ \*)//g<cr>A *)<esc>gvo<esc>r(gvo<esc>:nohlsearch<cr>

"-- n --"
noremap <leader>N :set number!<cr>
noremap <leader>n :NERDTreeToggle<cr>

"-- o --"
noremap <leader>o :only<cr>
noremap <leader>O :!open %<cr><cr>

"-- p --"
" Paste from system clipboard
noremap <leader>p <esc>o<esc>"+]p

"-- q --"
noremap <leader>q :cclose<cr>

"-- r --"
noremap <leader>rn :call RenameFile()<cr>
noremap <leader>re :%s/\r\(\n\)/\1/eg<cr>:retab<cr>:%s/\s\+$//e<cr>:nohlsearch<cr>
vnoremap <leader>r :!ruby<cr>
noremap <leader>rd :redraw!<cr>
noremap <leader>rr :w\|:call RunCurrentFile()<cr>

nnoremap <leader>rap  :RAddParameter<cr>
nnoremap <leader>rcpc :RConvertPostConditional<cr>
nnoremap <leader>rel :call PromoteToLet()<cr>
vnoremap <leader>rec  :RExtractConstant<cr>
vnoremap <leader>relv :RExtractLocalVariable<cr>
nnoremap <leader>rit  :RInlineTemp<cr>
vnoremap <leader>rrlv :RRenameLocalVariable<cr>
vnoremap <leader>rriv :RRenameInstanceVariable<cr>
vnoremap <leader>rem  :RExtractMethod<cr>

"-- s --"
noremap <leader>ss :vsp<cr>:A<cr>
noremap <leader>sv :source $MYVIMRC<cr>

"-- t --"
map <leader>t :w<cr>:call spectacular#run_tests()<cr>

"-- u --"

"-- v --"
noremap <leader>v :vsplit<cr>

"-- w --"
noremap <leader>w :w<cr>
noremap <leader>W :wq<cr>

"-- x --"
noremap <leader>x :set filetype=

"-- y --"
" Yank to system clipboard
noremap <leader>y "+y

"-- z --"
noremap <leader>z :call CorrectSpelling()<cr>

" ========================================
" == Command-T ===========================
" ========================================

nnoremap [commandt] <Nop>
nmap <space> [commandt]

map [commandt]f :CommandTFlush<cr>\|:CommandT<cr>
map [commandt]s :CommandTFlush<cr>\|:CommandT spec<cr>
map [commandt]c :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map [commandt]v :CommandTFlush<cr>\|:CommandT app/views<cr>
map [commandt]m :CommandTFlush<cr>\|:CommandT app/models<cr>
map [commandt]a :CommandTFlush<cr>\|:CommandT app/assets<cr>
map [commandt]l :CommandTFlush<cr>\|:CommandT app/lib<cr>

map [commandt]t :!retag<cr>\|:CommandTFlush<cr>\|:CommandTTag<cr>
map [commandt]b :CommandTBuffer<cr>

" ========================================
" == Misc plugin config ==================
" ========================================

let g:CommandTCancelMap=['<C-[>', '<C-c>']
let g:CommandTWildIgnore=&wildignore
      \."**/tmp/*,"
      \."**/bower_components/*,"
      \."**/node_modules/*,"
      \."**/_site/*,"
      \."**/vendor/*,"
      \."**/*.class,"
      \."**/*.gif,"
      \."**/*.png,"
      \."**/*.jpg,"
      \."**/*.jpeg,"
      \."**/doc/*"
let g:CommandTMaxHeight=20

let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsSnippetDirectories = ["snippets"]

let g:multi_cursor_exit_from_visual_mode = 0

let g:ruby_refactoring_map_keys = 0

let g:syntastic_ruby_checkers=['rubylint']
let g:syntastic_html_checkers=['tidy']

let NERDTreeIgnore = ['\.class$']

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

let g:spectacular_integrate_with_tmux = 1
let g:spectacular_integrate_with_dispatch = 0
let g:spectacular_debugging_mode = 1

" ========================================
" == Test running ========================
" ========================================

call spectacular#add_test_runner('cucumber', 'spring cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"), function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec} -t @focus', '', function("WithCucumberFocusTag"))
call spectacular#add_test_runner('cucumber', 'spring cucumber {spec}', '', function("InRailsApp"))
call spectacular#add_test_runner('cucumber', 'cucumber {spec}', '')
call spectacular#add_test_runner('ruby', 'spring cucumber', '_steps', function("InRailsApp"))
call spectacular#add_test_runner('ruby', 'cucumber', '_steps')

call spectacular#add_test_runner('ruby', 'spring rspec {spec} -t @focus', '_spec', function("TestsInRails"), function("WithRspecFocusTag"))
call spectacular#add_test_runner('ruby', 'spring rspec {spec}', '_spec', function("TestsInRails"))
call spectacular#add_test_runner('ruby', 'rspec {spec} -t @focus', '_spec', function("WithRspecFocusTag"))
call spectacular#add_test_runner('ruby', 'rspec {spec}', '_spec')

call spectacular#add_test_runner('sml', 'smlspec {spec}', '')

call spectacular#add_test_runner('javascript', 'karma run', '_spec')
call spectacular#add_test_runner('javascript', 'karma run', 'Spec')
call spectacular#add_test_runner('coffee', 'karma run', '_spec')
call spectacular#add_test_runner('coffee', 'karma run', 'Spec')

call spectacular#add_test_runner('java', 'javac *.java && junit {spec}', 'Test')

" ========================================
" == Local config ========================
" ========================================

try
  source ~/.vimrc.local
catch
endtry
