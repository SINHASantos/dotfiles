snippet ###
=begin
  $0
=end
endsnippet

snippet des "description" b
describe '$1' do
  $2
end
endsnippet

snippet fea
feature '$1' do
  $2
end
endsnippet

snippet it
it '$1' do
  $2
end
endsnippet

snippet sce
scenario '$1' do
  $2
end
endsnippet

snippet con "context" b
context '$1' do
  $2
end
endsnippet

snippet pry
require 'pry'; binding.pry
endsnippet

snippet save
save_and_open_page
endsnippet

snippet debug
puts "DEBUG: $1 => #{$1.inspect}"
endsnippet

snippet e "expect" b
expect($1).to $2
endsnippet

snippet testinggems
group :development do
  gem "spring"
  gem "spring-commands-rspec"
end

group :development, :test do
  gem 'capybara'
  gem 'factory_girl_rails'
  gem 'rspec-rails'
  gem 'shoulda-matchers'
end
endsnippet

snippet lspec
require 'rails_helper'
require_relative '$1'

describe '$2' do
  it '$3' do
    $0
  end
end
endsnippet

global !p
def title(x):
	return x.title()

def class_name():
	path_components = path.split("/")
	basename = path_components[-1].replace(".rb", "")
	return "".join(map(title, basename.split(" "))).replace("_", "")

def spec_name():
	return class_name().replace("Spec", "")

def inheritance():
	if "controller" in path:
		return " < ApplicationController"
	elif "model" in path:
		return " < ActiveRecord::Base"
	else:
		return ""

def current_line():
	return vim.eval("getline(line('.')-1)")

def singular_name():
	word = current_line().split(".")[-2].replace("@", "")
	return os.popen("singularize "+word).read().replace("\n", "")

endglobal

snippet class "Class for current file" !b
class `!p snip.rv = class_name() + inheritance()`
	$0
end
endsnippet

snippet spec
require 'rails_helper'

describe `!p snip.rv = spec_name()` do
  it '$2' do
    $0
  end
end
endsnippet

snippet "each|map|reject|select|find|detect|all\?|sort" "Enum method" ir
`!p if not snip.c: snip.rv = match.group(0) + " do |" + singular_name() + "|"`
	$0
end
endsnippet

snippet "inject" "Enum#inject" ir
`!p if not snip.c: snip.rv = match.group(0) + " do |acc, " + singular_name() + "|"`
	$0
end
endsnippet
